//***************************************************************************************
// Default.hlsl by Frank Luna (C) 2015 All Rights Reserved.
// Modified by Mark Longo 2020
// Default shader, currently supports lighting.
//***************************************************************************************

//***************************************************************************************
// Common.hlsl by Frank Luna (C) 2015 All Rights Reserved.
// Modified by Mark Longo 2020
//***************************************************************************************

// Defaults for number of lights.
#ifndef NUM_DIR_LIGHTS
#define NUM_DIR_LIGHTS 0
#endif

#ifndef NUM_POINT_LIGHTS
#define NUM_POINT_LIGHTS 16
#endif

#ifndef NUM_SPOT_LIGHTS
#define NUM_SPOT_LIGHTS 10
#endif

//***************************************************************************************
// LightingUtil.hlsl by Frank Luna (C) 2015 All Rights Reserved.
// Modified by Mark Longo 2020
// Contains API for shader lighting.
//***************************************************************************************

#define MaxLights 31

struct Light
{
    float3 Strength;
    float FalloffStart; // point/spot light only
    float3 Direction; // directional/spot light only
    float FalloffEnd; // point/spot light only
    float3 Position; // point light only
    float SpotPower; // spot light only
};

struct Material
{
    float4 DiffuseAlbedo;
    float3 FresnelR0;
    float Shininess;
    float Roughness; // Use roughness instead of shininess for modern PBR
    float Metallic; // Add metallic for PBR
};

// Helper: Linear to sRGB
float3 LinearToSRGB(float3 color)
{
    return pow(color, 1.0f / 2.2f);
}

// Helper: sRGB to Linear
float3 SRGBToLinear(float3 color)
{
    return pow(color, 2.2f);
}

// Fresnel-Schlick approximation
float3 FresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

// Normal Distribution Function (GGX/Trowbridge-Reitz)
float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0f);
    float NdotH2 = NdotH * NdotH;

    float denom = (NdotH2 * (a2 - 1.0f) + 1.0f);
    denom = 3.14159265f * denom * denom;
    return a2 / denom;
}

// Geometry function (Schlick-GGX)
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0f);
    float k = (r * r) / 8.0f;
    return NdotV / (NdotV * (1.0f - k) + k);
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0f);
    float NdotL = max(dot(N, L), 0.0f);
    float ggx1 = GeometrySchlickGGX(NdotV, roughness);
    float ggx2 = GeometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

// PBR Lighting (Cook-Torrance BRDF)
float3 PBRLighting(float3 albedo, float3 N, float3 V, float3 L, float3 F0, float roughness, float metallic, float3 lightColor, float attenuation)
{
    float3 H = normalize(V + L);
    float NDF = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float NdotL = max(dot(N, L), 0.0f);
    float NdotV = max(dot(N, V), 0.0f);
    float3 F = FresnelSchlick(max(dot(H, V), 0.0f), F0);

    float3 numerator = NDF * G * F;
    float denominator = 4.0f * NdotV * NdotL + 0.001f;
    float3 specular = numerator / denominator;

    float3 kS = F;
    float3 kD = 1.0f - kS;
    kD *= 1.0f - metallic;

    float3 diffuse = kD * albedo / 3.14159265f;

    return (diffuse + specular) * lightColor * NdotL * attenuation;
}

float CalcAttenuation(float d, float falloffStart, float falloffEnd)
{
    // Linear falloff.
    return saturate((falloffEnd - d) / (falloffEnd - falloffStart));
}

//---------------------------------------------------------------------------------------
// Evaluates the lighting equation for directional lights using PBR.
//---------------------------------------------------------------------------------------
float3 ComputeDirectionalLight(Light L, Material mat, float3 pos, float3 normal, float3 toEye)
{
    float3 lightVec = -L.Direction;
    float attenuation = 1.0f;
    float3 N = normalize(normal);
    float3 V = normalize(toEye);
    float3 albedo = mat.DiffuseAlbedo.rgb;
    float3 F0 = lerp(float3(0.04f, 0.04f, 0.04f), albedo, mat.Metallic);
    return PBRLighting(albedo, N, V, lightVec, F0, mat.Roughness, mat.Metallic, L.Strength, attenuation);
}

float3 ComputePointLight(Light L, Material mat, float3 pos, float3 normal, float3 toEye)
{
    float3 lightVec = L.Position - pos;
    float d = length(lightVec);
    if (d > L.FalloffEnd)
        return 0.0f;
    float3 Ld = normalize(lightVec);
    float3 N = normalize(normal);
    float3 V = normalize(toEye);
    float3 albedo = mat.DiffuseAlbedo.rgb;
    float3 F0 = lerp(float3(0.04f, 0.04f, 0.04f), albedo, mat.Metallic);
    float attenuation = CalcAttenuation(d, L.FalloffStart, L.FalloffEnd);
    return PBRLighting(albedo, N, V, Ld, F0, mat.Roughness, mat.Metallic, L.Strength, attenuation);
}

float3 ComputeSpotLight(Light L, Material mat, float3 pos, float3 normal, float3 toEye)
{
    float3 lightVec = L.Position - pos;
    float d = length(lightVec);
    if (d > L.FalloffEnd)
        return 0.0f;
    float3 Ld = normalize(lightVec);
    float3 N = normalize(normal);
    float3 V = normalize(toEye);
    float3 albedo = mat.DiffuseAlbedo.rgb;
    float3 F0 = lerp(float3(0.04f, 0.04f, 0.04f), albedo, mat.Metallic);
    float attenuation = CalcAttenuation(d, L.FalloffStart, L.FalloffEnd);
    float spotFactor = pow(max(dot(-Ld, normalize(L.Direction)), 0.0f), L.SpotPower);
    attenuation *= spotFactor;
    return PBRLighting(albedo, N, V, Ld, F0, mat.Roughness, mat.Metallic, L.Strength, attenuation);
}

float4 ComputeLighting(Light gLights[MaxLights], Material mat,
                       float3 pos, float3 normal, float3 toEye,
                       float3 shadowFactor)
{
    float3 result = 0.0f;
    int i = 0;

#if (NUM_DIR_LIGHTS > 0)
    for(i = 0; i < NUM_DIR_LIGHTS; ++i)
    {
        result += shadowFactor[0] * ComputeDirectionalLight(gLights[i], mat, pos, normal, toEye);
    }
#endif

#if (NUM_POINT_LIGHTS > 0)
    for (i = NUM_DIR_LIGHTS; i < NUM_DIR_LIGHTS + NUM_POINT_LIGHTS; ++i)
    {
        result += shadowFactor[0] * ComputePointLight(gLights[i], mat, pos, normal, toEye);
    }
#endif

#if (NUM_SPOT_LIGHTS > 0)
    for (i = NUM_DIR_LIGHTS + NUM_POINT_LIGHTS; i < NUM_DIR_LIGHTS + NUM_POINT_LIGHTS + NUM_SPOT_LIGHTS; ++i)
    {
        result += shadowFactor[0] * ComputeSpotLight(gLights[i], mat, pos, normal, toEye);
    }
#endif 

    // Optional: Tone mapping and gamma correction
    // result = result / (result + 1.0f); // simple Reinhard tone mapping
    // result = LinearToSRGB(result);

    return float4(result, 0.0f);
}

Texture2D gDiffuseMap : register(t0);
Texture2D gNormalMap : register(t1);
Texture2D gShadowMap : register(t2);
TextureCube gCubeMap : register(t4);
Texture2D gSsaoMap : register(t5);

SamplerState gsamPointWrap : register(s0);
SamplerState gsamPointClamp : register(s1);
SamplerState gsamLinearWrap : register(s2);
SamplerState gsamLinearClamp : register(s3);
SamplerState gsamAnisotropicWrap : register(s4);
SamplerState gsamAnisotropicClamp : register(s5);
SamplerComparisonState gsamShadow : register(s6);

// Constant data that varies per frame.
cbuffer cbPerObject : register(b0)
{
    float4x4 gWorld;
    float4x4 gTexTransform;
};

cbuffer cbMaterial : register(b1)
{
    float4 gDiffuseAlbedo;
    float3 gFresnelR0;
    float gRoughness;
    float4x4 gMatTransform;
    float gMetal;
};

cbuffer cbPass : register(b2)
{
    float4x4 gView;
    float4x4 gInvView;
    float4x4 gProj;
    float4x4 gInvProj;
    float4x4 gViewProj;
    float4x4 gInvViewProj;
    float4x4 gViewProjTex;
    float4x4 gShadowTransform;
    float3 gEyePosW;
    float cbPerObjectPad1;
    float2 gRenderTargetSize;
    float2 gInvRenderTargetSize;
    float gNearZ;
    float gFarZ;
    float gTotalTime;
    float gDeltaTime;
    float4 gAmbientLight;
    float4 gFogColor;
    float gFogStart;
    float gFogRange;
    float2 cbPerObjectPad2;
    Light gLights[MaxLights];
};

struct MaterialData
{
    float4 DiffuseAlbedo;
    float3 FresnelR0;
    float Roughness;
    float4x4 MatTransform;
};

//---------------------------------------------------------------------------------------
// Transforms a normal map sample to world space.
//---------------------------------------------------------------------------------------
float3 NormalSampleToWorldSpace(float3 normalMapSample, float3 unitNormalW, float3 tangentW)
{
    float3 normalT = 2.0f * normalMapSample - 1.0f;
    float3 N = unitNormalW;
    float3 T = normalize(tangentW - dot(tangentW, N) * N);
    float3 B = cross(N, T);
    float3x3 TBN = float3x3(T, B, N);
    float3 bumpedNormalW = mul(normalT, TBN);
    return bumpedNormalW;
}

//---------------------------------------------------------------------------------------
// PCF for shadow mapping.
//---------------------------------------------------------------------------------------
float CalcShadowFactor(float4 shadowPosH)
{
    shadowPosH.xyz /= shadowPosH.w;
    float depth = shadowPosH.z;
    if (shadowPosH.x < 0.0f || shadowPosH.x > 1.0f ||
        shadowPosH.y < 0.0f || shadowPosH.y > 1.0f)
    {
        return 1.0f;
    }
    uint width, height, numMips;
    gShadowMap.GetDimensions(0, width, height, numMips);
    float dx = 1.0f / (float) width;
    float percentLit = 0.0f;
    const float2 offsets[9] =
    {
        float2(-dx, -dx), float2(0.0f, -dx), float2(dx, -dx),
        float2(-dx, 0.0f), float2(0.0f, 0.0f), float2(dx, 0.0f),
        float2(-dx, +dx), float2(0.0f, +dx), float2(dx, +dx)
    };
    [unroll]
    for (int i = 0; i < 9; ++i)
    {
        percentLit += gShadowMap.SampleCmpLevelZero(gsamShadow,
            shadowPosH.xy + offsets[i], depth).r;
    }
    return percentLit / 9.0f;
}

struct VertexIn
{
    float3 PosL : POSITION;
    float3 NormalL : NORMAL;
    float2 TexC : TEXCOORD;
    float3 TangentU : TANGENT;
};

struct VertexOut
{
    float4 PosH : SV_POSITION;
    float4 ShadowPosH : POSITION0;
    float4 SsaoPosH : POSITION1;
    float3 PosW : POSITION2;
    float3 NormalW : NORMAL;
    float3 TangentW : TANGENT;
    float2 TexC : TEXCOORD;
};

VertexOut VS(VertexIn vin)
{
    VertexOut vout = (VertexOut) 0.0f;
    float4 posW = mul(float4(vin.PosL, 1.0f), gWorld);
    vout.PosW = posW.xyz;
    vout.NormalW = mul(vin.NormalL, (float3x3) gWorld);
    vout.TangentW = mul(vin.TangentU, (float3x3) gWorld);
    vout.PosH = mul(posW, gViewProj);
    vout.SsaoPosH = mul(posW, gViewProjTex);
    float4 texC = mul(float4(vin.TexC, 0.0f, 1.0f), gTexTransform);
    vout.TexC = mul(texC, gMatTransform).xy;
    vout.ShadowPosH = mul(posW, gShadowTransform);
    return vout;
}

float3 ComputePbrAmbient(float3 albedo, float3 F0, float roughness, float metallic, float3 ambientLight)
{
    float3 kS = F0;
    float3 kD = 1.0f - kS;
    kD *= 1.0f - metallic;
    float3 diffuse = kD * albedo / 3.14159265f;
    float3 specular = kS; // Approximate, since no IBL
    return (diffuse + specular) * ambientLight;
}

float4 PS(VertexOut pin) : SV_Target
{
    float4 diffuseAlbedo = gDiffuseAlbedo;
    float3 fresnelR0 = gFresnelR0;
    float roughness = gRoughness;
    diffuseAlbedo *= gDiffuseMap.Sample(gsamAnisotropicWrap, pin.TexC);
#ifdef ALPHA_TEST
    clip(diffuseAlbedo.a - 0.1f);
#endif
    pin.NormalW = normalize(pin.NormalW);
    float4 normalMapSample = gNormalMap.Sample(gsamAnisotropicWrap, pin.TexC);
    float3 bumpedNormalW = NormalSampleToWorldSpace(normalMapSample.rgb, pin.NormalW, pin.TangentW);
    float3 toEyeW = gEyePosW - pin.PosW;
    float distToEye = length(toEyeW);
    toEyeW /= distToEye;
    pin.SsaoPosH /= pin.SsaoPosH.w;
    float ambientAccess = 1.0f;
#ifdef SSAO    
    ambientAccess = gSsaoMap.Sample(gsamLinearClamp, pin.SsaoPosH.xy, 0.0f).r;
#endif
    const float shininess = (1.0f - roughness) * (normalMapSample.a * 1.0f);
    Material mat = { diffuseAlbedo, gFresnelR0, shininess, gRoughness, gMetal };
    float3 shadowFactor = float3(1.0f, 1.0f, 1.0f);
    float result = CalcShadowFactor(pin.ShadowPosH);
    shadowFactor[0] = result;
    // PBR ambient calculation
    float3 albedo = diffuseAlbedo.rgb;
    float3 F0 = lerp(float3(0.04f, 0.04f, 0.04f), albedo, gMetal);
    float3 pbrAmbient = ComputePbrAmbient(albedo, F0, gRoughness, gMetal, gAmbientLight.rgb);
    float4 ambient = ambientAccess * float4(pbrAmbient, 1.0f);
    float4 directLight = ComputeLighting(gLights, mat, pin.PosW,
        bumpedNormalW, toEyeW, shadowFactor);
    float4 litColor = ambient + directLight;
    // Remove legacy Blinn-Phong fresnel add, keep only PBR
#ifdef FOG
    float fogAmount = saturate((distToEye - gFogStart) / gFogRange);
    litColor = lerp(litColor, gFogColor, fogAmount);
#endif
    litColor.a = diffuseAlbedo.a;
    return litColor;
}
